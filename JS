const canvas = document.getElementById('tetris');
const context = canvas.getContext('2d');
context.scale(30, 30); // 1マス=30px

const ROWS = 20, COLS = 10;
const colors = [null, '#00f0f0', '#0000f0', '#f0a000', '#f0f000', '#00f000', '#a000f0', '#f00000'];
const tetrominoes = {
  'I': [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],
  'J': [[2,0,0],[2,2,2],[0,0,0]],
  'L': [[0,0,3],[3,3,3],[0,0,0]],
  'O': [[4,4],[4,4]],
  'S': [[0,5,5],[5,5,0],[0,0,0]],
  'T': [[0,6,0],[6,6,6],[0,0,0]],
  'Z': [[7,7,0],[0,7,7],[0,0,0]],
};

let arena = createMatrix(COLS, ROWS);
let player = { pos: {x: 0, y: 0}, matrix: null };
let dropCounter = 0;
let dropInterval = 1000; // ← 自由に調整可能
let lastTime = 0;
let blockCount = 0;
let isPaused = false;
let gameOver = false;

function createMatrix(w, h) {
  return Array.from({ length: h }, () => new Array(w).fill(0));
}

function drawMatrix(matrix, offset) {
  matrix.forEach((row, y) => {
    row.forEach((value, x) => {
      if (value) {
        context.fillStyle = colors[value];
        context.fillRect(x + offset.x, y + offset.y, 1, 1);
      }
    });
  });
}

function draw() {
  context.fillStyle = '#000';
  context.fillRect(0, 0, canvas.width, canvas.height);
  drawMatrix(arena, {x: 0, y: 0});
  drawMatrix(player.matrix, player.pos);
}

function collide(arena, player) {
  const m = player.matrix;
  const o = player.pos;
  for (let y = 0; y < m.length; ++y) {
    for (let x = 0; x < m[y].length; ++x) {
      if (m[y][x] && (arena[y + o.y] && arena[y + o.y][x + o.x]) !== 0) {
        return true;
      }
    }
  }
  return false;
}

function merge(arena, player) {
  player.matrix.forEach((row, y) => {
    row.forEach((value, x) => {
      if (value) arena[y + player.pos.y][x + player.pos.x] = value;
    });
  });
}

function rotate(matrix) {
  return matrix[0].map((_, i) => matrix.map(row => row[i])).reverse();
}

function playerReset() {
  const pieces = 'IJLOSTZ';
  const type = pieces[Math.floor(Math.random() * pieces.length)];
  player.matrix = tetrominoes[type];
  player.pos.y = 0;
  player.pos.x = (COLS / 2 | 0) - (player.matrix[0].length / 2 | 0);

  if (collide(arena, player)) {
    document.getElementById('game-over').style.display = 'block';
    gameOver = true;
    isPaused = true;
  } else {
    blockCount++;
    document.getElementById('block-count').textContent = Score: ${blockCount}`;
  }
}

function playerDrop() {
  player.pos.y++;
  if (collide(arena, player)) {
    player.pos.y--;
    merge(arena, player);
    sweepRows();
    playerReset();
  }
  dropCounter = 0;
}

function playerHardDrop() {
  while (!collide(arena, player)) {
    player.pos.y++;
  }
  player.pos.y--;
  merge(arena, player);
  sweepRows();
  playerReset();
  dropCounter = 0;
}

function playerMove(dir) {
  player.pos.x += dir;
  if (collide(arena, player)) {
    player.pos.x -= dir;
  }
}

function playerRotateRight() {
  const original = player.matrix;
  player.matrix = rotate(player.matrix);
  if (collide(arena, player)) {
    player.matrix = original;
  }
}

function playerRotateLeft() {
  const original = player.matrix;
  player.matrix = rotate(rotate(rotate(player.matrix)));
  if (collide(arena, player)) {
    player.matrix = original;
  }
}

function sweepRows() {
  outer: for (let y = ROWS - 1; y >= 0; --y) {
    for (let x = 0; x < COLS; ++x) {
      if (!arena[y][x]) continue outer;
    }
    arena.splice(y, 1);
    arena.unshift(new Array(COLS).fill(0));
    ++y;
  }
}

function update(time = 0) {
  if (!gameOver && !isPaused) {
    const deltaTime = time - lastTime;
    lastTime = time;
    dropCounter += deltaTime;
    if (dropCounter > dropInterval) playerDrop();
  }
  draw();
  requestAnimationFrame(update);
}

document.addEventListener('keydown', event => {
  if (gameOver) return;
  switch (event.key) {
    case 'ArrowLeft':
    case 'a': playerMove(-1); break;
    case 'ArrowRight':
    case 'd': playerMove(1); break;
    case 'ArrowDown':
    case 's': playerDrop(); break;
    case ' ': playerHardDrop(); break;
    case 'e':
    case 'w': playerRotateRight(); break;
    case 'q': playerRotateLeft(); break;
  }
});

document.getElementById('restart-button').addEventListener('click', () => {
  arena = createMatrix(COLS, ROWS);
  blockCount = 0;
  document.getElementById('block-count').textContent = `Score: 0`;
  document.getElementById('game-over').style.display = 'none';
  playerReset();
  isPaused = false;
  gameOver = false;
  dropCounter = 0;
  lastTime = 0;
});

document.getElementById('pause-button').addEventListener('click', () => {
  if (gameOver) return;
  isPaused = !isPaused;
  document.getElementById('pause-button').textContent = isPaused ? 'Restart' : 'Pose';
});

playerReset();
update();
da
